Dalam pemrograman, **Util (Utility) dan Helper** sering digunakan secara bergantian, tetapi sebenarnya ada perbedaan konsep di antara keduanya:

---

### **1. Util (Utility)**
âœ… **Penggunaan:**
- Biasanya berisi fungsi **stateless** (tidak menyimpan state/data internal).
- Bersifat **umum dan reusable** di berbagai bagian aplikasi.
- **Tidak tergantung pada instance atau objek tertentu.**

âœ… **Ciri-ciri:**
- Biasanya berupa **`object` atau `static class`**, karena tidak butuh instance.
- Berisi **fungsi-fungsi murni (pure functions)**, seperti konversi format, validasi, perhitungan, dll.

âœ… **Contoh (Kotlin - Utility Object)**
```kotlin
object DateUtil {
    fun formatDate(date: LocalDate, pattern: String = "yyyy-MM-dd"): String {
        return date.format(DateTimeFormatter.ofPattern(pattern))
    }
}
```
ðŸ›  **Penggunaan:**
```kotlin
val formattedDate = DateUtil.formatDate(LocalDate.now())
```
ðŸ’¡ **Utility digunakan untuk fungsi yang bersifat stateless dan bisa dipanggil tanpa membuat instance.**

---

### **2. Helper**
âœ… **Penggunaan:**
- Biasanya digunakan untuk **membantu operasi tertentu dalam konteks spesifik.**
- Bisa memiliki **state (data internal)** dan sering digunakan dalam **proses bisnis tertentu**.

âœ… **Ciri-ciri:**
- Bisa berupa **`class` dengan dependency injection** atau membutuhkan instance untuk bekerja.
- Sering digunakan untuk **memudahkan tugas-tugas kompleks** di dalam suatu fitur.

âœ… **Contoh (Kotlin - Helper Class)**
```kotlin
class AuthHelper(private val settingsUseCase: SettingsUseCase) {
    fun getUserToken(): String {
        return settingsUseCase.getToken() ?: "Guest"
    }
}
```
ðŸ›  **Penggunaan (dengan Dependency Injection Koin)**:
```kotlin
val authHelper: AuthHelper = get()
val token = authHelper.getUserToken()
```
ðŸ’¡ **Helper digunakan untuk tugas-tugas spesifik yang memerlukan dependensi atau state.**

---

### **Perbedaan Utama**
| Aspek | Util (Utility) | Helper |
|-------|--------------|--------|
| **Tujuan** | Fungsi umum dan stateless | Membantu tugas spesifik dan bisa menyimpan state |
| **Bentuk** | `object` atau `static class` | `class` dengan instance |
| **Dependency** | Tidak membutuhkan dependency | Bisa memiliki dependency |
| **Contoh** | Format tanggal, konversi, validasi | Autentikasi, pengelolaan cache, API wrapper |

---

### **Kapan Menggunakan Utility vs Helper?**
âœ… **Gunakan Utility jika:**
- Fungsi bisa **berjalan tanpa instance** dan bersifat umum (misal, format tanggal, hash string).
- Tidak butuh dependency atau akses ke data internal.

âœ… **Gunakan Helper jika:**
- Butuh **state atau dependency injection** untuk bekerja.
- Digunakan dalam konteks spesifik seperti **autentikasi, penyimpanan data, atau API handling**.

---

### **Kesimpulan**
- **Utility lebih global dan stateless**, sering berbentuk `object`.
- **Helper lebih spesifik dan bisa memiliki state**, biasanya berbentuk `class`.

Kombinasi keduanya sering digunakan dalam aplikasi besar. Misalnya, **Utility untuk validasi format**, sedangkan **Helper untuk menangani login user** dengan data dari local storage. ðŸš€


Pemilihan nama untuk **Helper** dan **Utility** sangat penting agar mudah dipahami dan sesuai dengan fungsinya. Berikut adalah beberapa rekomendasi:

---

### **1. Util (Utility) File Naming**
Karena Utility bersifat stateless dan umum, gunakan nama yang **menggambarkan fungsinya secara spesifik**, misalnya:
âœ… **Format:** `NamaFunctionUtil` atau `NamaKategoriUtil`

| **Fungsi** | **Nama File yang Disarankan** |
|------------|------------------------------|
| Mengelola format tanggal | `DateUtil.kt` |
| Konversi nilai (misalnya, DP ke PX di Android) | `ConversionUtil.kt` |
| Validasi email, password, dll. | `ValidationUtil.kt` |
| Encode/decode teks (Base64, Hash) | `EncodingUtil.kt` |
| Logging khusus | `LoggerUtil.kt` |
| Manajemen konfigurasi | `ConfigUtil.kt` |

ðŸ“Œ **Contoh kode (Utility untuk validasi email)**
```kotlin
object ValidationUtil {
    fun isValidEmail(email: String): Boolean {
        return android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()
    }
}
```

---

### **2. Helper File Naming**
Helper biasanya berisi logika bisnis atau memanfaatkan dependency injection. Gunakan nama yang **menggambarkan tugas spesifiknya**.
âœ… **Format:** `NamaFunctionHelper` atau `NamaFiturHelper`

| **Fungsi** | **Nama File yang Disarankan** |
|------------|------------------------------|
| Mengambil token user dari local storage | `AuthHelper.kt` |
| Mengelola cache atau penyimpanan data | `StorageHelper.kt` |
| Menjalankan request API dengan retry policy | `ApiHelper.kt` |
| Membantu proses autentikasi | `LoginHelper.kt` |
| Mengatur bahasa dan locale | `LocaleHelper.kt` |

ðŸ“Œ **Contoh kode (Helper untuk mendapatkan token pengguna dari storage)**
```kotlin
class AuthHelper(private val settingsUseCase: SettingsUseCase) {
    fun getUserToken(): String {
        return settingsUseCase.getToken() ?: "Guest"
    }
}
```

---

### **Kesimpulan**
1. **Utility (`Util.kt`)** â†’ Untuk fungsi **stateless, global, dan reusable**. Biasanya berupa `object`.
2. **Helper (`Helper.kt`)** â†’ Untuk **fungsi spesifik, bisa memiliki state, dan sering memanfaatkan dependency injection**.

ðŸš€ **Contoh Struktur Folder yang Rapi**
```
utils/
  â”œâ”€â”€ DateUtil.kt
  â”œâ”€â”€ ValidationUtil.kt
  â”œâ”€â”€ ConversionUtil.kt
helpers/
  â”œâ”€â”€ AuthHelper.kt
  â”œâ”€â”€ ApiHelper.kt
  â”œâ”€â”€ StorageHelper.kt
```
Dengan cara ini, kode tetap **terorganisir, mudah dipahami, dan scalable**! ðŸ’¡