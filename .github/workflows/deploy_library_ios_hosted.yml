name: Loc - Deploy Library iOS

on:
  workflow_call:
    inputs:
      github_version:
        required: true
        type: string

defaults:
  run:
    shell: zsh --login --errexit --pipefail {0}

# concurrency:
#   group: ${{ github.actor }}-${{ github.workflow_ref }}
#   cancel-in-progress: true

jobs:
  deploy_library:
    name: Deploy Library iOS
    runs-on: mk-mac-ios-01
    timeout-minutes: 100

    outputs:
      github_state: ${{ steps.id_setup_github_state.outputs.github_state }}

    steps:
      - name: Validate Version Input
        run: |
          VERSION="${{ inputs.github_version }}"
          if [[ -z "$VERSION" ]]; then
            echo "Version input is required."
            exit 1
          fi
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Use semantic versioning (e.g., 1.0.0)."
            exit 1
          fi

      - name: Print Inputs
        run: |
          echo "version": "${{ inputs.github_version }}"

      - name: Xcode List Available
        run: ls /Applications | grep Xcode

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Grant Execution Permission for Build Script SPM
        run: chmod +x build_library_xcframework.sh

      - name: Grant Execution Permission for Build Script POD
        run: chmod +x build_library_podfile.sh

      - name: Build Library XCFramework
        run: |
          ./build_library_xcframework.sh
        env:
          version: ${{ inputs.github_version }}

      - name: Build Library Podspec
        run: |
          ./build_library_podfile.sh
        env:
          version: ${{ inputs.github_version }}

      - name: Verify XCFramework Build
        run: |
          if [ ! -f "Shared.xcframework.zip" ]; then
            echo "XCFramework ZIP not found!"
            exit 1
          fi
        shell: bash

      - name: Logging for Debugging
        run: |
          echo "Checking repository..."
          ls -al

      - name: List Files
        run: |
          ls -R
        
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${{ vars.CONFIG_USER_NAME }}"
          git config --global user.email "${{ vars.CONFIG_USER_EMAIL }}"

          # Add files to Git
          git add Package.swift NetDataLibrary.podspec

          # Commit changes
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Update Package.swift and Shared.xcframework.zip for version ${{ inputs.github_version }}"
            # Push changes to the same branch
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          fi

      - name: Push Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${{ vars.CONFIG_USER_NAME }}"
          git config --global user.email "${{ vars.CONFIG_USER_EMAIL }}"
          git tag -a ${{ inputs.github_version }} -m "Release ${{ inputs.github_version }}"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} ${{ inputs.github_version }}

      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ inputs.github_version }} \
            Shared.xcframework.zip \
            --generate-notes \
            --latest

      - name: Upload XCFramework ZIP as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Shared.xcframework.zip
          path: Shared.xcframework.zip

      - name: Setup Github State
        id: id_setup_github_state
        if: ${{ always() }}
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "github_state=success" >> $GITHUB_OUTPUT
          else
            echo "github_state=failure" >> $GITHUB_OUTPUT
          fi


  notification_msteams:
    if: ${{ always() }}
    needs: deploy_library
    uses: ./.github/workflows/notification_hosted.yml
    with:
      webhook: "${{ vars.WEBHOOK_TEAMS_IOS_LIBRARY }}"
      github_version: "${{ inputs.github_version }}"
      github_state: "${{ needs.deploy_library.outputs.github_state }}"
      