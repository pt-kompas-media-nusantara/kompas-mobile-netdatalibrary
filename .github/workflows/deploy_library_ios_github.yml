name: ZGit - Deploy Library iOS

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version : "
        required: true
        default: ""
        type: string

jobs:
  deploy_library_ios:
    name: Deploy Library iOS
    runs-on: macos-14
    timeout-minutes: 10

    steps:
      - name: Validate Version Input
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ -z "$VERSION" ]]; then
            echo "Version input is required."
            exit 1
          fi
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Use semantic versioning (e.g., 1.0.0)."
            exit 1
          fi

      - name: Print Inputs
        run: |
          echo "version": "${{ github.event.inputs.version }}"

      - name: Setup Xcode
        run: sudo xcode-select -s /Applications/Xcode_15.3.app

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Cache Swift Packages
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: |
            Pods
            ~/Library/Caches/CocoaPods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-

      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"
          cache-dependency-path: |
            **/*.gradle*
            **/gradle-wrapper.properties

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true

      - name: Grant Execution Permission for Build Script
        run: chmod +x build_library_xcframework.sh

      # - name: Build Gradle Project
      #   run: ./gradlew build --no-daemon
      #   continue-on-error: false

      - name: Build Library XCFramework
        run: |
          ./build_library_xcframework.sh

      - name: Verify XCFramework Build
        run: |
          if [ ! -f "Shared.xcframework.zip" ]; then
            echo "XCFramework ZIP not found!"
            exit 1
          fi
        shell: bash

      - name: Upload XCFramework ZIP as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Shared.xcframework.zip
          path: Shared.xcframework.zip

      - name: Push Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "nurirppan"
          git config --global user.email "nurirppan@gmail.com"
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} ${{ github.event.inputs.version }}

      - name: Create or Update Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.event.inputs.version }} \
            Shared.xcframework.zip \
            --notes "XCFramework for version ${{ github.event.inputs.version }}." \
            --target v1.0/dev --latest

      - name: Logging for Debugging
        run: |
          echo "Checking repository..."
          ls -al

      - name: List Files
        run: |
          ls -R

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.event.inputs.version }}
      #     release_name: ${{ github.event.inputs.version }}
      #     body: |
      #       XCFramework for version ${{ github.event.inputs.version }}.
      #     draft: false
      #     prerelease: false

      # - name: Debug Create Release Outputs
      #   if: ${{ always() }}
      #   run: |
      #     echo "Outputs from create_release:"
      #     echo "upload_url: ${{ steps.create_release.outputs.upload_url }}"
      #     echo "html_url: ${{ steps.create_release.outputs.html_url }}"

      # - name: Upload XCFramework to Release
      #   if: github.event_name == 'workflow_dispatch'
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.html_url }}
      #     asset_path: Shared.xcframework.zip
      #     asset_name: Shared.xcframework.zip
      #     asset_content_type: application/zip

# Outputs from create_release:
# upload_url: https://uploads.github.com/repos/pt-kompas-media-nusantara/kompas-mobile-netdatalibrary/releases/189886828/assets{?name,label}
# html_url: https://github.com/pt-kompas-media-nusantara/kompas-mobile-netdatalibrary/releases/tag/1.0.15
# # Create release or update existing one
# gh release create ${{ github.event.inputs.version }} \
#   Shared.xcframework.zip \
#   --title "Release ${{ github.event.inputs.version }}" \
#   --notes "XCFramework for version ${{ github.event.inputs.version }}." \
#   --target v1.0/dev --latest
